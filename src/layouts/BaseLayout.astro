---
// src/layouts/BaseLayout.astro — version finale
import Menu from "@partials/components/Menu.tsx";
import Footer from "@partials/components/Footer.astro";
import FooterMenu from "@partials/components/FooterMenu.astro";
import { getSeoKeywords, getSchemaForPage } from "@js/data/CompanyData.ts";
import "../scss/main.scss";
import SpeedInsights from '@vercel/speed-insights/astro';
import VercelAnalytics from '@/partials/analytics/VercelAnalytics.tsx';

export interface Props {
  title: string;
  description?: string;
  pageClass?: string;
  dataPage?: string;
  dataModules?: string;
  dataVariant?: string;
  pageType?: "home" | "entreprise" | "general";
  seo?: {
    url: string;
    image?: string;
    schemaType?: "LocalBusiness" | "Organization" | "Article" | "Review";
  };
  preloadImage?: string;
}

const {
  title,
  description,
  pageClass,
  dataPage,
  dataModules,
  dataVariant = "white",
  pageType = "home",
  seo,
  preloadImage,
} = Astro.props;

const baseName = "SBG Coaching - Samuel Billa Garcia";
const getSeoTitle = (t, p) =>
  p === "entreprise"
    ? `${t} | Coaching Sportif Entreprise Liège | ${baseName}`
    : p === "general"
    ? `${t} | Personal Trainer Liège | ${baseName}`
    : `${t} | ${baseName}`;

const getSeoDescription = (d, p) => {
  if (d) return d;
  if (p === "entreprise")
    return "Coaching sportif en entreprise à Liège : team-building, cohésion d’équipe…";
  if (p === "general")
    return "Coach sportif personnel à Liège. Programme fitness personnalisé…";
  return "SBG Coaching – coach sportif à Liège, coaching personnel et entreprise.";
};

// Correctifs FR pour la description SEO par défaut
const getSeoDescriptionFixed = (d, p) => {
  if (d) return d;
  if (p === "entreprise")
    return "Coaching sportif en entreprise à Liège: team building, cohésion d’équipe.";
  if (p === "general")
    return "Coach sportif personnel à Liège. Programme fitness personnalisé.";
  return "SBG Coaching – coach sportif à Liège, coaching personnel et entreprise.";
};

const getSeoTitleFixed = (t, p) =>
  p === "entreprise"
    ? `${t} | Coaching sportif en entreprise à Liège | ${baseName}`
    : p === "general"
    ? `${t} | Coach sportif à Liège | ${baseName}`
    : `${t} | ${baseName}`;

const optimizedTitle = getSeoTitleFixed(title, pageType);
const optimizedTitleFr = optimizedTitle.replace('Personal Trainer Li��ge', 'Coach sportif Li��ge');
const optimizedDescription = getSeoDescriptionFixed(description, pageType);
const keywords = getSeoKeywords(pageType === "home" ? "all" : pageType);
const canonicalUrl = seo?.url || `https://sbgcoaching.be${Astro.url.pathname}`;
const rawOgImage = seo?.image ?? "/img/og-default.webp";
const ogImageUrl = rawOgImage.startsWith("http")
  ? rawOgImage
  : `https://sbgcoaching.be${rawOgImage}`;
const GA_BUILD_ID = import.meta.env.PUBLIC_GA_ID || "";       /* ← valeur .env */
---

<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />

    <title>{optimizedTitle}</title>
    <meta name="description" content={optimizedDescription} />
    <meta name="keywords" content={keywords.join(", ")} />
    <meta name="robots" content="index,follow,max-snippet:-1,max-image-preview:large,max-video-preview:-1" />
    <link rel="canonical" href={canonicalUrl} />

    <link rel="icon" href="/img/logo.svg" type="image/svg+xml" />
    <meta name="theme-color" content="#ffffff" />
    <link rel="preconnect" href="https://www.googletagmanager.com" crossorigin />
    <link rel="dns-prefetch" href="https://www.googletagmanager.com" />

    <link rel="preload" as="font" href="/font/Nexa-Bold.woff2" type="font/woff2" crossorigin />
    <link rel="preload" as="font" href="/font/Nexa-Regular.woff2" type="font/woff2" crossorigin />
    {preloadImage && <link rel="preload" as="image" href={preloadImage} type="image/png" />}

    <meta property="og:type" content="website" />
    <meta property="og:title" content={optimizedTitle} />
    <meta property="og:description" content={optimizedDescription} />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:image" content={ogImageUrl} />
    <meta property="og:site_name" content="SBG Coaching" />
    <meta name="twitter:card" content="summary_large_image" />

    <style>
      .skip-link {
        position: absolute;
        top: -40px;
        left: 0;
        background: #000;
        color: #fff;
        padding: 8px 12px;
        z-index: 10000;
      }
      .skip-link:focus { top: 8px; }
      /* Utility: screen-reader only */
      .sr-only {
        position: absolute !important;
        width: 1px; height: 1px;
        padding: 0; margin: -1px;
        overflow: hidden; clip: rect(0, 0, 1px, 1px);
        white-space: nowrap; border: 0;
      }
    </style>

    <script type="application/ld+json" set:html={JSON.stringify(getSchemaForPage(pageType))}></script>
    {GA_BUILD_ID && (
      <script async src={`https://www.googletagmanager.com/gtag/js?id=${GA_BUILD_ID}`}></script>
    )}
    <slot name="head" />
  </head>

  <body
    class={pageClass ?? ""}
    data-page={dataPage ?? ""}
    data-module={dataModules ?? ""}
    data-variant={dataVariant}
  >
    <a href="#main-content" class="skip-link">Aller au contenu principal</a>
    <Menu client:idle variant={dataVariant as "white" | "black"} />
    <slot />
    {["legal", "privacy-policy", "thanks", "program"].includes(dataPage ?? "")
      ? <FooterMenu />
      : ["contact", "rdv"].includes(dataPage ?? "")
      ? null
      : <Footer />}

    <script>
  (function () {
    // valeur injectée au build par Astro
    const GA_ID = String("{GA_MEASUREMENT_ID}");

    // exécute uniquement si GA_ID est défini ET différent du placeholder
    if (GA_ID && GA_ID !== "G-XXXXXXXXXX") {
      window.dataLayer = window.dataLayer || [];
      window.gtag = (...args) => window.dataLayer.push(args);

      window.gtag("js", new Date());
      window.gtag("config", GA_ID, {
        page_title: document.title,
        page_location: window.location.href,
      });

      (async () => {
        try {
          const { getCLS, getFID, getFCP, getLCP, getTTFB } = await import("web-vitals");
          const send = (m) =>
            window.gtag("event", m.name, {
              event_category: "Web Vitals",
              value: Math.round(m.name === "CLS" ? m.value * 1000 : m.value),
              non_interaction: true,
            });
          getCLS(send); getFID(send); getFCP(send); getLCP(send); getTTFB(send);
        } catch {
          console.log("Web Vitals non disponible");
        }
      })();
    }

    /* Engagement 30 s / 60 s */
    let t = 0, hit30 = false, hit60 = false;
    const iv = setInterval(() => {
      t += 10;
      if (t >= 30 && !hit30) { window.gtag?.("event", "engagement_30s"); hit30 = true; }
      if (t >= 60 && !hit60) { window.gtag?.("event", "engagement_60s"); hit60 = true; clearInterval(iv); }
    }, 10_000);

    /* Scroll 75 % */
    let max = 0, sent = false;
    window.addEventListener("scroll", () => {
      const p = Math.round((scrollY / (document.documentElement.scrollHeight - innerHeight)) * 100);
      if (p > max) { max = p; if (p >= 75 && !sent) { window.gtag?.("event", "scroll_75_percent"); sent = true; } }
    }, { passive: true });

    /* Service-Worker si présent */
    /* window.addEventListener("load", async () => {
      if (!("serviceWorker" in navigator)) return;
      try {
        const r = await fetch("/sw.js", { method: "HEAD" });
        if (r.ok) await navigator.serviceWorker.register("/sw.js");
      } catch {}
    }); */
  })();
</script>
    <SpeedInsights />
    <VercelAnalytics client:idle />
  </body>
</html>
